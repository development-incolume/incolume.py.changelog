name: Multiplataform GWA CI/CD    # Success run

on:
  workflow_dispatch:
   inputs:
     environment:
       description: 'The environment to deploy to (e.g. production, staging)'
       required: true
       default: 'tags'
  pull_request:
    branches:
      - inanis
  push:
    branches:
      - inanis
    tags:
      - "*.*.*"

jobs:
  linters:
    name: Check Quality Assurance
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install -U pip uv ruff
          uv sync

      # - name: Check isort
      #   continue-on-error: true
      #   run: |
      #     poetry run isort check incolume/ tests/

      - name: Check with mypy
        continue-on-error: true
        run: |
          uv run mypy incolume/ tests/

      - name: Format with ruff
        continue-on-error: true
        run: ¦
          uv run ruff format incolume/ tests/

      - name: Lint with ruff
        continue-on-error: true
        run: ¦
          uv run ruff check --fix incolume/ tests/

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: 'Code formated with ruff'


  test:
    runs-on: ${{ matrix.os }}
    needs: [linters]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install -U uv pip
        uv sync

    - name: Test with pytest and generate coverage report
      run: |
        uv run pytest -vv

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@master

    - name: Generate coverage report
      run: |
        pip install -U pip uv
        uv sync
        uv run pytest

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        fail_ci_if_error: true # optional (default = false)
        verbose: true # optional (default = false)


  build:
    name: Build package release
    runs-on: "ubuntu-latest"
    needs: [test]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install -U uv pip
          uv sync

      - name: Build version
        run: |
          uv -V

      - name: Build package with uv
        run: |
          uv build

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        if: success()   # failure():: => contexts#job-status-check-functions
        with:
          name: build-package
          path: dist/
          if-no-files-found: error   # 'error', 'warn' or 'ignore' are also available, defaults to `warn`

  tagged-release:
    name: "Tagged Release"
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-package
          path: dist/

      - uses: "marvinpinto/action-automatic-releases@latest"
        continue-on-error: true
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: true
          files: |
            dist/*

  publish-testpypi:
    name: Publish Test PyPI
    runs-on: ubuntu-latest
    needs: [tagged-release]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install -U uv

      - uses: actions/download-artifact@v4
        with:
          name: build-package
          path: dist/

      - name: Publish to testpypi
        continue-on-error: true
        run: |
          uv publish --index testpypi --token ${{ secrets.TEST_PYPI_TOKEN }}

  publish-pypi:
    name: Publish PyPI
    runs-on: ubuntu-latest
    needs: [tagged-release]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install -U uv

      - uses: actions/download-artifact@v4
        with:
          name: build-package
          path: dist/

      - name: Publish to pypi
        continue-on-error: true
        run: |
          uv publish --index https://pypi.org/legacy/ --token ${{ secrets.PYPI_TOKEN }}


