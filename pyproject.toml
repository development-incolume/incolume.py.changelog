[tool.poetry]
name = "incolume.py.changelog"
version = "0.3.0a10"
description = "Generate CHANGELOG.md"
license = "Unlicense"
keywords = ['python', 'utils', 'incolume']
authors = [
  "britodfbr <contato@incolume.com.br>",
]
maintainers = [
  "britodfbr <contato@incolume.com.br>",
]
readme = "README.md"
packages = [
  {include = "incolume", from=""},
]
classifiers = [
  'Development Status :: 5 - Production/Stable',
  'Operating System :: OS Independent',
  'Natural Language :: Portuguese (Brazilian)',
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  'Topic :: Software Development :: Libraries :: Python Modules',
  'Topic :: Utilities',
]
include = [
  'README.md',
  "CHANGELOG.md",
  'docs/',
  'pyproject.toml',
]
exclude = [
  "examples/",
  "ez_setup",
  "incolumepy/utils/tmp",
  "my_package/excluded.py",
  "tests/",
]

[tool.poetry.urls]
'Documentation' = 'https://development-incolume.github.io/incolume.py.changelog/'
'Source' = 'https://github.com/development-incolume/incolume.py.changelog/releases'
'Git' = 'https://github.com/development-incolume/incolume.py.changelog.git'
'Tracker' = 'https://github.com/development-incolume/incolume.py.changelog/issues'
'Oficial' = 'https://pypi.org/project/incolume.py.changelog/'

[tool.poetry.scripts]
changelog = 'incolume.py.changelog.cli:changelog'
gcl = 'incolume.py.changelog.cli:changelog'
gencl = 'incolume.py.changelog.cli:changelog'
gchangelog = 'incolume.py.changelog.cli:changelog'

[tool.poetry.dependencies]
python = "^3.8.1"
toml = {extras = ["tomli"], version = "^0.10.2"}
click = "^8.1.5"

[tool.poetry.group.dev.dependencies]
blue = "^0.9.0"
flake8 = "^6.1.0"
isort = "^5.13.1"
mypy = "^1.7.1"
mypy-extensions = "^1.0.0"
pydocstyle = "^6.3.0"
pylint = "^3.0.3"
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
ruff = "^0.1.7"
taskipy = "^1.12.2"
tox = "^4.11.4"
types-toml = "^0.10.8.7"



[tool.poetry.group.doc.dependencies]
mkdocs = "^1.5.3"
mkdocstrings = "^0.24.0"
mkdocstrings-python = "^1.7.5"
mkdocs-material = "^9.5.2"


[tool.poetry.group.security.dependencies]
bandit = "^1.7.6"
pip-audit = "^2.6.1"
safety = "^2.3.4"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
log_format = '%(asctime)s; %(levelname)-8s; %(name)s; %(module)s; %(funcName)s; %(message)s'
log_date_format ='%FT%T%N%z'
addopts = "--doctest-modules --cov=incolume -sx --cov-report term-missing --cov-report html:coverage_report/html --cov-report xml:coverage_report/cov.xml"
testpaths = [
  "tests",
]
python_files = [
  "test_*.py",
  "*_tests.py"
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "webtest: marks tests as webtest (deselect with '-m \"not webtest\"')",
  "fasttest: marks tests as fasttest (deselect with '-m \"not fasttest\"')",
]

[tool.coverage.html]
directory = "coverage_report/html"

[tool.coverage.xml]

[tool.coverage.run]
omit = [
  # omit anything in a .local directory anywhere
  "*/.local/*",
  # omit everything in /usr
  "/usr/*",
  # omit this single file
  "configure/truncus.py",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
  "logger.debug",
  "logger.info",
  "logger.warning",
  "logger.error",
  "except ImportError",
  "except (ModuleNotFoundError, ImportError)",
  "except ModuleNotFoundError",
  "__package__ =",
  "def run",
  "def terminal.",
  "__author__",
  "class IElements"
]


[PEP8]
# Detalhes em https://pep8.org/
# define para todos os linters compatíveis
max-line-length = 79

[tool.black]
line-length = 79
#target-version = ['py38']
# include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/pyproject.toml  # exclude a file named pyproject.toml in the root of the project (in addition to the defaults)
\.tox
\.eggs
build
dist
exemplos
relatorios
docs
data
.pytest_cache
'''

[flake8]
#max-line-length = 120
max-complexity = 5

[tool.pylama]
format = "pylint"
skip = "*/.tox/*,*/.env/*"
linters = "pylint,mccabe"
ignore = "F0401,C0111,E731"

#[[tools.pylama.files]]
#path = "incolumepy/utils/files.py"
#ignore = "C901"
#skip = 1

[tool.pylama.linter.pyflakes]
builtins = "_"

[tool.pylama.linter.pycodestyle]
max_line_length = 79

[tool.pylama.linter.pylint]
max_line_length = 79
disable = "R"

[tool.pylama.linter.mccabe]
max-complexity=5

[tool.pylint.master]
init-hook = 'import sys; sys.path.append(".")'    # força carregamento do PYTHONPATH no pylint. Necessário no Windows.

[tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 79
# Format style used to check logging format string. `old` means using %
# formatting, `new` is for `{}` formatting,and `fstr` is for f-strings.
logging-format-style = 'old'

[tool.pylint.basic]
# Allow shorter and longer variable names than the default.
argument-rgx = "[a-z_][a-z0-9_]*$"
attr-rgx = "[a-z_][a-z0-9_]*$"
variable-rgx = "[a-z_][a-z0-9_]*$"

# Ensure that orjson is analysed as a C extension by pylint.
extension-pkg-whitelist = "orjson"

[tool.pylint.messages_control]
disable = [
    # Disable too many and too few checks.
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-boolean-expressions",
    "too-many-branches",
    "too-many-function-args",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-nested-blocks",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "too-few-public-methods",

    # Similar lines in files (often the case in tests).
    "duplicate-code",

    # Many functions (e.g. callbacks) will naturally have unused arguments.
    "unused-argument",

    # Disable checking that method could be a function in classes (often used for organisation).
    "no-self-use",

    # Disable failure for TODO items in the codebase (code will always have TODOs).
    "fixme",

    # Disable docstrings checks as we don't require excessive documentation.
    "missing-docstring",

    "no-member",
    "unspecified-encoding",
]

[tool.mypy]
mypy_path = "incolume"
namespace_packages = false
check_untyped_defs = true
disallow_any_generics = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
no_implicit_reexport = true

#[[tool.mypy.overrides]]
#disable_error_code = "attr-defined"
#disallow_untyped_defs = true


[tool.isort]
ensure_newline_before_comments = true
extend_skip = [".md", ".json"]
extend_skip_glob = ["my_*_module.py"]
force_grid_wrap = 0
include_trailing_comma = true
known_first_party = "poetry"
line_length = 79
multi_line_output = 3
profile = "black"
skip = [".gitignore", ".dockerignore"]
skip_glob = ["example/*"]
use_parentheses = true


[pycodestyle]
ignore = ['E203']
#max_line_length = 120


[tool.tox]
legacy_tox_ini = """
[tox]
minversion = 3.1.0
isolated_build = True
envlist =
    clean
    black
    isort
    pydocstyle
    mypy
    pylama
    pylint
    py37
    py38
    py39
    py310
    py311

;[tox:.package]
;basepython = python3

[testenv]
whitelist_externals = poetry
skip_install = true
commands =
    poetry env use {envpython}
    poetry install -vv --no-root
    poetry run pytest --pylama {posargs} tests/ -m \"not(slow or webtest)\"

[testenv:clean]
deps = coverage
commands =
  poetry run coverage erase

[testenv:linters]
commands =
  {[testenv:black]commands}
  {[testenv:isort]commands}
;  {[testenv:flake8]commands}
  {[testenv:pydocstyle]commands}
  {[testenv:mypy]commands}
  {[testenv:pylama]commands}
  {[testenv:pylint]commands}

[testenv:stats]
commands = poetry run pytest -xv --cov-report html:coverage_report/html --cov-report xml:coverage_report/cov.xml

;[testenv:flake8]
;deps = flake8
;commands = poetry run flake8 --config pyproject.toml incolumepy/ tests/

[testenv:mypy]
deps =
    mypy
    types-toml
    types-Deprecated
commands = poetry run mypy incolumepy/

[testenv:pydocstyle]
commands = poetry run pydocstyle incolumepy/ tests/

[testenv:isort]
commands = poetry run isort --check --atomic --py all incolumepy/ tests/

[testenv:pylama]
deps = pylama
commands = poetry run pylama incolumepy/ tests/

[testenv:pylint]
commands = poetry run pylint incolumepy/ tests/

[testenv:black]
commands = poetry run black --check incolumepy/ tests/

[testenv:safety]
commands = poetry run safety check
"""

[tool.bandit]
exclude_dirs = ["tests", "examples", "coverage_report"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]


[tool.bandit.any_other_function_with_shell_equals_true]
no_shell = [
  "os.execl",
  "os.execle",
  "os.execlp",
  "os.execlpe",
  "os.execv",
  "os.execve",
  "os.execvp",
  "os.execvpe",
  "os.spawnl",
  "os.spawnle",
  "os.spawnlp",
  "os.spawnlpe",
  "os.spawnv",
  "os.spawnve",
  "os.spawnvp",
  "os.spawnvpe",
  "os.startfile"
]
shell = [
  "os.system",
  "os.popen",
  "os.popen2",
  "os.popen3",
  "os.popen4",
  "popen2.popen2",
  "popen2.popen3",
  "popen2.popen4",
  "popen2.Popen3",
  "popen2.Popen4",
  "commands.getoutput",
  "commands.getstatusoutput"
]
subprocess = [
  "subprocess.Popen",
  "subprocess.call",
  "subprocess.check_call",
  "subprocess.check_output"
]

[tool.ruff]
# required-version = "0.1.6"

# Assume Python Version
target-version = "py38"

# Decrease the maximum line length to 79 character.
line-length = 79

# Allow imports relative to directories
src = ["incolume/", "tests/"]
select = [
  "A",    #flake8-builtins
  "AIR",    #Airflow
  "ANN",    #flake8-annotations
  "ARG",    #flake8-unused-arguments
  "ASYNC",    #flake8-async
  "B",    #flake8-bugbear
  "BLE",    #flake8-blind-except
  "C4",    #flake8-comprehensions
  "C90",    #mccabe
  "COM",    #flake8-commas
  "CPY",    #flake8-copyright
  "D",   # pydocstyle
  "DJ",    #flake8-django
  "DTZ",    #flake8-datetimez
  "E",   # pycodestyle
  "W",    #pycodestyle
  "EM",    #flake8-errmsg
  "ERA",    #eradicate
  "EXE",    #flake8-executable
  "F",   # pyflakes
  "FA",    #flake8-future-annotations
  "FBT",    #flake8-boolean-trap
  "FIX",    #flake8-fixme
  "FLY",    #flynt
  "FURB",    #refurb
  "G",    #flake8-logging-format
  "I",    #isort
  "ICN",    #flake8-import-conventions
  "INP",    #flake8-no-pep420
  "INT",    #flake8-gettext
  "ISC",    #flake8-implicit-str-concat
  "N",    #pep8-naming
  "NPY",    #NumPy-specific rules
  "PD",    #pandas-vet
  "PERF",    #Perflint
  "PGH",    #pygrep-hooks
  "PIE",    #flake8-pie
  "PL",    #Pylint
  "PT",    #flake8-pytest-style
  "PTH",    #flake8-use-pathlib
  "PYI",    #flake8-pyi
  "Q",    #flake8-quotes
  "RET",    #flake8-return
  "RSE",    #flake8-raise
  "RUF",    #Ruff-specific rules
  "S",    #flake8-bandit
  "SIM",    #flake8-simplify
  "SLF",    #flake8-self
  "SLOT",    #flake8-slots
  "T10",    #flake8-debugger
  "T20",    #flake8-print
  "TCH",    #flake8-type-checking
  "TD",    #flake8-todos
  "TID",    #flake8-tidy-imports
  "TRY",    #tryceratops
  "UP",  # pyupgrade
  "YTT",    #flake8-2020
]

# Never enforce `E501` (line length violations).
ignore = ["INP001", "CPY001"]

# Avoid trying to fix flake8-bugbear (`B`) violations.
unfixable = ["B"]

namespace-packages = ["incolume/py"]
fix = false
force-exclude = true
task-tags = ["TODO", "FIXME"]

# Enumerate all fixed violations.
show-fixes = true

# By default, always show source code snippets.
show-source = true

# Enable preview features.
preview = true

# Group violations by containing file. "text" | "json" | "junit" | "github" | "gitlab" | "pylint" | "azure"
output-format = "grouped"

# Require explicit selection of preview rules.
explicit-preview-rules = true

# Allow applying all unsafe fixes in the `E` rules and `F401` without the `--unsafe-fixes` flag
extend-safe-fixes = ["E", "F401"]

[tool.ruff.format]
indent-style = "space"

[tool.ruff.per-file-ignores]
# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
#"__init__.py" = ["E402"]
#"path/to/file.py" = ["E402"]
#"**/{tests,docs,tools}/*" = ["E402"]
"**/{tests,docs,tools,utils}/*" = ["EXE002"]
"**/*_tests.py" = [
  "ANN001",
  "ANN101",
  "EXE002",
  "I001",
  "PLR6301",
  "S101",
]
"**/test_*.py" = [
  "ANN001",
  "ANN101",
  "EXE002",
  "I001",
  "PLR6301",
  "S101",
]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 5

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true
suppress-dummy-args = true
mypy-init-return = true

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.flake8-copyright]
author = "Ruff"
# Avoid enforcing a header on files smaller than 1024 bytes.
min-file-size = 2

[tool.ruff.flake8-quotes]
# Don't bother trying to avoid escapes.
avoid-escape = false
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"


[tool.ruff.lint.flake8-pytest-style]
parametrize-names-type = "list"
parametrize-values-row-type = "tuple"

[tool.taskipy.settings]
use_vars = true

[tool.taskipy.variables]
path = "incolume/ tests/"
VERSIONFILE = "incolume/py/changelog/version.txt"
CHANGELOGFILE = "docs/about/CHANGELOG.md"
URLCOMPARE = "https://github.com/development-incolume/incolume.py.changelog/compare"

[tool.taskipy.tasks]
#bandit={help='', cmd='poetry run bandit -c pyproject.toml -r {path}', use_vars=true}
#pre_check-all = {cmd='echo Starting Check all ..', help=''}
#check-all = {cmd='poetry run task clean-all; poetry run task lint; poetry run task sec',  help = "Checking all" }
#post_check-all = {cmd='echo Checking finished!', help=''}
clean = {cmd = "echo -n 'Starting cleanning environment..'; find ./ \\( -wholename '*report_coverage' -o -name '*.pyc' -o -name '*~' -o -name '*.log' -o -name '*.log.*' -o -name '.cache' -o -name '.coverage' \\) -delete ; echo ' ok' ",  help = "Shallow clean into environment (.pyc, .cache, .egg, .log, et all)" }
pre_clean-all = {cmd='poetry run task clean', help=''}
clean-all = {cmd = "echo -n 'Starting Deep cleanning ..'; find ./ \\( -name '*_cache' -o -name '*cache__' -o -name dist -o -name build -o -name .tox -o -name site -o -name coverage_report \\) -exec rm -rf {} 2> /dev/null \\; ; echo ' Deep cleaning finished!' ",  help = "Deep cleanning into environment (dist, build, htmlcov, .tox, *_cache, et all)" }
pre_docs-build={help='Pre docs-build', cmd="poetry run task gcl"}
docs-build = {help="Generate documentation", cmd="poetry run mkdocs gh-deploy --config-file mkdocs.yml --remote-branch webdoc"}
docs-serve = {help="Run server documentation", cmd="poetry run mkdocs serve"}
gsumary = {help="Generate a sumary with dojos", cmd="poetry run sumary -f {sumary_file} -r ", use_vars=true}
post_gsumary={cmd='git commit -m "docs: Atualização do sumário" {sumary_file}', use_vars=true}
lint-all = {help="Run all linters", cmd="poetry run task clean-all; poetry run task pre_lint && poetry run task lint_mypy && poetry run task lint_ruff"}
pre_lint="task lint_blue && task lint_isort && task lint_flake8 && task lint_pydocstyle && task lint_mypy && task lint_pylint"
lint={help='Checking all linters configurated', cmd=''}
lint_black={help='Checking with black', cmd='echo --black--; poetry run black --check --diff {path}', use_vars=true}
lint_blue={help='Checking with blue', cmd='echo --blue--; poetry run blue --check --diff {path}', use_vars=true}
lint_flake8={help='Checking with flake8', cmd='echo --flake8--; poetry run flake8 --config pyproject.toml {path}', use_vars=true}
lint_isort={help='Checking with isort', cmd='echo --isort--; poetry run isort --profile black --check --atomic --py all -m 3 {path}', use_vars=true}
lint_mypy={help='Checking with mypy', cmd='echo --mypy--; poetry run mypy --check {path}', use_vars=true}
lint_pydocstyle={help='Checking with pydocstyle', cmd='echo --pydocstyle--; poetry run pydocstyle {path}', use_vars=true}
lint_pylint={help='Checking with pylint', cmd='echo --pylint--; poetry run pylint {path}', use_vars=true}
lint_ruff={help='', cmd='echo --ruff--; poetry run ruff check --preview {path}', use_vars=true}
pre_patch={help='Run linters tools', cmd="poetry run task lint"}
patch={cmd='v=$(poetry version patch) && poetry run task tests && git ci -m "$v" pyproject.toml $(find incolume* -name version.txt)', help='Generate a patch Sematic Version'}
post_patch={help='Run securety tools', cmd="poetry run task bandit && poetry run task safety"}
premajor={cmd='v=$(poetry version premajor) && poetry run task tests && git ci -m "$v" pyproject.toml $(find incolume* -name version.txt)', help='poetry version premajor'}
preminor={cmd='v=$(poetry version preminor) && poetry run task tests && git ci -m "$v" pyproject.toml $(find incolume* -name version.txt)', help='poetry version preminor'}
#pre_prerelease='poetry run task gsumary'
prerelease={cmd='v=$(poetry version prerelease) && poetry run task tests && git ci -m "$v" pyproject.toml $(find incolume* -name version.txt)', help='poetry version prerelease'}
safety={help='Check safety of packages into project.', cmd='poetry run safety check'}
pre_sec={help='Securance validations', cmd='poetry run task bandit && poetry run task safety'}
sec={help="Checking environment's safety", cmd=''}
pre_changelog='poetry run pytest -m fast'
pre_tests={help='', cmd='task clean-all'}
tests={help='run all tests', cmd='poetry run pytest -m "not webtest"'}
pre_test-all={help='', cmd='task lint'}
test-all={help='Test all cases', cmd='task tests'}
changelog = {help='Update changelog file', cmd = "poetry run gcl {CHANGELOGFILE} -u {URLCOMPARE} && echo CHANGELOG file - {CHANGELOGFILE} - updated with success.;echo", use_vars = true }
gcl = {help='Update changelog file', cmd='poetry run task changelog'}
#xpto = { cmd = "echo {path} {CHANGELOGFILE} {URLCOMPARE}", use_vars = true }
setup = { help = 'Configure environment develop', cmd='git config core.hooksPath .git-hooks/'}
