[tool.poetry]
name = "incolume.py.changelog"
version = "0.1.0"
description = "Generate CHANGELOG.md"
keywords = ['python', 'utils', 'incolume']
authors = ["britodfbr <contato@incolume.com.br>"]
packages = [
  {include = "incolume", from=""},
]
classifiers = [
  'Development Status :: 5 - Production/Stable',
  'Operating System :: OS Independent',
  'Natural Language :: Portuguese (Brazilian)',
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  'Topic :: Software Development :: Libraries :: Python Modules',
  'Topic :: Utilities',
]
include = [
  'README.md',
  "CHANGELOG.md",
  'docs/',
  'pyproject.toml',
]
exclude = [
  "examples/",
  "ez_setup",
  "incolumepy/utils/tmp",
  "my_package/excluded.py",
  "tests/",
]

[tool.poetry.urls]
'Documentation' = 'https://brito.blog.incolume.com.br/search/label/development-incolume'
'Source' = 'https://gitlab.com/development-incolume/incolumepy.utils'
'Git' = 'https://gitlab.com/development-incolume/incolumepy.utils.git'
'Tracker' = 'https://gitlab.com/development-incolume/incolumepy.utils/issues'
'Oficial' = 'https://pypi.org/project/incolumepy.utils/'

[tool.poetry.scripts]
incolumepy-utils = 'incolumepy.utils.main:run'
changelog = 'incolumepy.utils.cli:changelog'
gcl = 'incolumepy.utils.cli:changelog'
gencl = 'incolumepy.utils.cli:changelog'
gchangelog = 'incolumepy.utils.cli:changelog'

[tool.poetry.dependencies]
python = "^3.8"
toml = {extras = ["tomli"], version = "^0.10.2"}
click = "^8.1.5"

[tool.poetry.group.dev.dependencies]



[tool.poetry.group.doc.dependencies]
mkdocs = "^1.5.3"
mkdocstrings = "^0.24.0"
mkdocstrings-python = "^1.7.5"
mkdocs-material = "^9.5.2"


[tool.poetry.group.security.dependencies]
bandit = "^1.7.6"
pip-audit = "^2.6.1"
safety = "^2.3.4"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
log_format = '%(asctime)s; %(levelname)-8s; %(name)s; %(module)s; %(funcName)s; %(message)s'
log_date_format ='%FT%T%N%z'
addopts = "--cov=incolumepy"
testpaths = [
  "tests",
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "webtest: marks tests as webtest (deselect with '-m \"not webtest\"')",
  "fasttest: marks tests as fasttest (deselect with '-m \"not fasttest\"')",
]

[tool.coverage.html]
directory = "coverage_report/html"

[tool.coverage.xml]

[tool.coverage.run]
omit = [
  # omit anything in a .local directory anywhere
  "*/.local/*",
  # omit everything in /usr
  "/usr/*",
  # omit this single file
  "configure/truncus.py",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
  "logger.debug",
  "logger.info",
  "logger.warning",
  "logger.error",
  "except ImportError",
  "except (ModuleNotFoundError, ImportError)",
  "except ModuleNotFoundError",
  "__package__ =",
  "def run",
  "def terminal.",
  "__author__",
  "class IElements"
]


[PEP8]
# Detalhes em https://pep8.org/
# define para todos os linters compatíveis
max-line-length = 79

[tool.black]
line-length = 79
#target-version = ['py38']
# include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/pyproject.toml  # exclude a file named pyproject.toml in the root of the project (in addition to the defaults)
\.tox
\.eggs
build
dist
exemplos
relatorios
docs
data
.pytest_cache
'''

[flake8]
#max-line-length = 120
max-complexity = 5

[tool.pylama]
format = "pylint"
skip = "*/.tox/*,*/.env/*"
linters = "pylint,mccabe"
ignore = "F0401,C0111,E731"

#[[tools.pylama.files]]
#path = "incolumepy/utils/files.py"
#ignore = "C901"
#skip = 1

[tool.pylama.linter.pyflakes]
builtins = "_"

[tool.pylama.linter.pycodestyle]
max_line_length = 79

[tool.pylama.linter.pylint]
max_line_length = 79
disable = "R"

[tool.pylama.linter.mccabe]
max-complexity=5

[tool.pylint.master]
init-hook = 'import sys; sys.path.append(".")'    # força carregamento do PYTHONPATH no pylint. Necessário no Windows.

[tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 79
# Format style used to check logging format string. `old` means using %
# formatting, `new` is for `{}` formatting,and `fstr` is for f-strings.
logging-format-style = 'old'

[tool.pylint.basic]
# Allow shorter and longer variable names than the default.
argument-rgx = "[a-z_][a-z0-9_]*$"
attr-rgx = "[a-z_][a-z0-9_]*$"
variable-rgx = "[a-z_][a-z0-9_]*$"

# Ensure that orjson is analysed as a C extension by pylint.
extension-pkg-whitelist = "orjson"

[tool.pylint.messages_control]
disable = [
    # Disable too many and too few checks.
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-boolean-expressions",
    "too-many-branches",
    "too-many-function-args",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-nested-blocks",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "too-few-public-methods",

    # Similar lines in files (often the case in tests).
    "duplicate-code",

    # Many functions (e.g. callbacks) will naturally have unused arguments.
    "unused-argument",

    # Disable checking that method could be a function in classes (often used for organisation).
    "no-self-use",

    # Disable failure for TODO items in the codebase (code will always have TODOs).
    "fixme",

    # Disable docstrings checks as we don't require excessive documentation.
    "missing-docstring",

    "no-member",
    "unspecified-encoding",
]

[tool.mypy]
mypy_path = "incolumepy"
check_untyped_defs = true
disallow_any_generics = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
no_implicit_reexport = true

[tool.isort]
multi_line_output = 3
#line_length = 120
include_trailing_comma = true

[pycodestyle]
#max_line_length = 120

# Fail
# TODO verificar disponibilidade no futuro; não funciona com pyproject.toml
#[pylava]
#format = 'pylint'
#async = 1
## ignore = D203,D213,F0401,C0111,E731,I0011
## linters = pycodestyle,pyflakes,mccabe,pydocstyle,pylint
#paths = ['src']
## skip = pylava/inirama.py,pylava/libs/*
#verbose = 0

[tool.tox]
legacy_tox_ini = """
[tox]
minversion = 3.1.0
isolated_build = True
envlist =
    clean
    black
    isort
    pydocstyle
    mypy
    pylama
    pylint
    py37
    py38
    py39
    py310
    py311

;[tox:.package]
;basepython = python3

[testenv]
whitelist_externals = poetry
skip_install = true
commands =
    poetry env use {envpython}
    poetry install -vv --no-root
    poetry run pytest --pylama {posargs} tests/ -m \"not(slow or webtest)\"

[testenv:clean]
deps = coverage
commands =
  poetry run coverage erase

[testenv:linters]
commands =
  {[testenv:black]commands}
  {[testenv:isort]commands}
;  {[testenv:flake8]commands}
  {[testenv:pydocstyle]commands}
  {[testenv:mypy]commands}
  {[testenv:pylama]commands}
  {[testenv:pylint]commands}

[testenv:stats]
commands = poetry run pytest -xv --cov-report html:coverage_report/html --cov-report xml:coverage_report/cov.xml

;[testenv:flake8]
;deps = flake8
;commands = poetry run flake8 --config pyproject.toml incolumepy/ tests/

[testenv:mypy]
deps =
    mypy
    types-toml
    types-Deprecated
commands = poetry run mypy incolumepy/

[testenv:pydocstyle]
commands = poetry run pydocstyle incolumepy/ tests/

[testenv:isort]
commands = poetry run isort --check --atomic --py all incolumepy/ tests/

[testenv:pylama]
deps = pylama
commands = poetry run pylama incolumepy/ tests/

[testenv:pylint]
commands = poetry run pylint incolumepy/ tests/

[testenv:black]
commands = poetry run black --check incolumepy/ tests/

[testenv:safety]
commands = poetry run safety check
"""
